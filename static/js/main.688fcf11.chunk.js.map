{"version":3,"sources":["components/account-view.tsx","components/accounts-overview.tsx","components/transaction-view.tsx","components/account-view-detailed.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","mapStringToColor","str","balance","sum","split","map","char","charCodeAt","reduce","acc","curr","length","AccountView","num","account","totalBalance","balancePercentage","Math","abs","floor","className","style","marginTop","name","to","id","role","width","AccountsOverview","accounts","assets","filter","liabilities","assetsTotalBalance","liabilitiesTotalBalance","key","TransactionView","transaction","amount","AccountViewDetailed","useParams","find","useState","transactions","setTransactions","useEffect","idx","toString","display","flexDirection","App","setAccounts","basename","marginBottom","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.688fcf11.chunk.js","sourcesContent":["import React from 'react'\nimport { Account } from '../types'\nimport { Link } from 'react-router-dom'\n\nconst roundToTwoDecimals = (num: number) => Math.floor(num * 100) / 100\n\nconst colors = [\n  'primary',\n  'success',\n  'info',\n]\n\nconst mapStringToColor = (str: string, balance: number) => {\n  if (balance < 0) {\n    return 'danger'\n  }\n  const sum = str.split('').map((char) => char.charCodeAt(0)).reduce((acc, curr) => acc + curr, 0)\n  const idx = sum % colors.length\n  return colors[idx]\n}\n\nexport const AccountView: React.FC<{ account: Account, totalBalance: number }> = ({ account, totalBalance }) => {\n  const balancePercentage = Math.abs(roundToTwoDecimals(account.balance / totalBalance * 100))\n\n  return (\n    <div\n      className=\"row\"\n      style={{\n        marginTop: '0.5rem'\n      }}\n    >\n      <div className=\"col\">\n        <div className=\"card\">\n          <div className=\"row no-gutters\">\n            <div className=\"col\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{account.name}</h5>\n                <Link\n                  to={`/accounts/${account.id}`}\n                  className=\"btn btn-primary\"\n                >More Info</Link>\n                <p className=\"card-text\">\n                  Balance: {account.balance}\n                </p>\n                <p className=\"card-text\">\n                  Percentage: {balancePercentage}\n                </p>\n                <div className=\"progress\">\n                  <div className={`progress-bar bg-${mapStringToColor(account.name, account.balance)}`} role=\"progressbar\" style={{\n                    width: `${balancePercentage}%`\n                  }}></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { Account } from '../types'\nimport { AccountView } from './account-view'\n\nexport const AccountsOverview: React.FC<{ accounts: Account[] }> = ({ accounts }) => {\n  const assets = accounts.filter(account => account.balance > 0)\n  const liabilities = accounts.filter(account => account.balance < 0)\n\n  const assetsTotalBalance = assets.reduce((acc, curr) => acc + curr.balance, 0)\n  const liabilitiesTotalBalance = liabilities.reduce((acc, curr) => acc + curr.balance, 0)\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <h2>Accounts</h2>\n          <span>Net worth: {assetsTotalBalance + liabilitiesTotalBalance}</span>\n        </div>\n      </div>\n      <div\n        className=\"row\"\n        style={{\n          marginTop: '1rem'\n        }}\n      >\n        <div className=\"col\">\n          <h3>Assets</h3>\n          <span>Total balance: {assetsTotalBalance}</span>\n          {assets.map((account) => <AccountView key={account.id} account={account} totalBalance={assetsTotalBalance} />)}\n        </div>\n      </div>\n      <div\n        className=\"row\"\n        style={{\n          marginTop: '1rem'\n        }}\n      >\n        <div className=\"col\">\n          <h3>Liabilities</h3>\n          <span>Total balance: {liabilitiesTotalBalance}</span>\n          {liabilities.map((account) => <AccountView key={account.id} account={account} totalBalance={liabilitiesTotalBalance} />)}\n        </div>\n      </div>\n    </div>\n  )\n}","import React from 'react'\nimport { Transaction } from '../types'\n\nexport const TransactionView: React.FC<{ transaction: Transaction }> = ({ transaction }) => {\n  return (\n    <div\n      className=\"row\"\n      style={{\n        marginTop: '0.5rem'\n      }}\n    >\n      <div className=\"col\">\n        <div className=\"card\">\n          <div className=\"row no-gutters\">\n            <div className=\"col\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{transaction.name}</h5>\n                <p className=\"card-text\">\n                  Amount: {transaction.amount}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Account, Transaction } from '../types'\nimport { TransactionView } from './transaction-view'\n\nexport const AccountViewDetailed: React.FC<{ accounts: Account[] }> = ({ accounts }) => {\n  const { id } = useParams()\n  const account = accounts.find(account => account.id === id)\n\n  const [transactions, setTransactions] = useState<Transaction[]>([])\n\n  useEffect(() => {\n    setTransactions([\n      {\n        name: 'Foo Bagels',\n        amount: 20\n      }\n    ].map((transaction, idx) => {\n      return {\n        ...transaction,\n        id: idx.toString()\n      }\n    }))\n  }, [])\n\n  return (\n    <div className=\"row\">\n      <div\n        className=\"col\"\n        style={{\n          display: 'flex',\n          flexDirection: 'column'\n        }}\n      >\n        <span>Name: {account?.name}</span>\n        <span>Number of transactions: {transactions.length}</span>\n        {transactions.map(transaction => <TransactionView key={transaction.id} transaction={transaction} />)}\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom'\nimport { AccountsOverview } from './components/accounts-overview'\nimport { AccountViewDetailed } from './components/account-view-detailed'\nimport { Account } from './types'\n\nfunction App() {\n  const [accounts, setAccounts] = useState<Account[]>([])\n\n  useEffect(() => {\n    setAccounts([\n      {\n        name: 'Bank of Fubar',\n        balance: 400\n      },\n      {\n        name: 'Spøkelse GmbH.',\n        balance: 200\n      },\n      {\n        name: 'Evil CC Co',\n        balance: -150\n      },\n      {\n        name: 'BigEvilBank Inc.',\n        balance: -50\n      },\n    ].map((account, idx) => {\n      return {\n        ...account,\n        id: idx.toString()\n      }\n    }))\n  }, [])\n\n  return (\n    <Router basename=\"/menta2\">\n      <div>\n        <div className=\"container\">\n          <div\n            className=\"row\"\n            style={{\n              marginBottom: '1rem'\n            }}\n          >\n            <div className=\"col\">\n              <h1>Menta</h1>\n            </div>\n          </div>\n          <Switch>\n            <Route path=\"/\" exact>\n              <AccountsOverview accounts={accounts} />\n            </Route>\n            <Route path=\"/accounts/:id\" exact>\n              <AccountViewDetailed accounts={accounts} />\n            </Route>\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}